"""
Django settings for razmenakarata project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from os import environ, path
from django.core.management.utils import get_random_secret_key
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(path.join(BASE_DIR.parent, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get("DJANGO_SECRET_KEY", get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = environ.get("DJANGO_DEBUG", "True") == "True"

ALLOWED_HOSTS = [i for i in environ.get("DJANGO_ALLOWED_HOSTS", "").split(",") if i]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "huey.contrib.djhuey",
    "rest_framework_simplejwt",
    "corsheaders",
    "rest_framework",
    "sorl.thumbnail",
    "drf_spectacular",
    "drf_standardized_errors",
    "djoser",
    "events",
    "v1",
    "users",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


DATABASES = {
    "sqlite": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
    "postgresql": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": environ.get("POSTGRES_HOST", "localhost"),
        "NAME": environ.get("POSTGRES_NAME", "postgres"),
        "USER": environ.get("POSTGRES_USER", "postgres"),
        "PASSWORD": environ.get("POSTGRES_PASSWORD", "postgres"),
        "PORT": int(environ.get("POSTGRES_PORT", 5432)),
    },
}
DATABASES = {"default": DATABASES[environ.get("DJANGO_DB", "sqlite")]}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"
# TODO: Remove this when migrating to CDN
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOW_ALL_ORIGINS = DEBUG
CORS_ALLOWED_ORIGINS = [i for i in environ.get("DJANGO_CORS_ORIGINS", "").split(",") if i]

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        # TODO: Use environment variables for this
        "LOCATION": "redis://" + environ.get("REDIS_HOST", "127.0.0.1:6379"),
    }
}

HUEY = {
    "huey_class": "huey.RedisHuey",
    "immediate": False,
    "connection": {"url": "redis://" + environ.get("REDIS_HOST", "127.0.0.1:6379")},
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
    # TODO: Enable this
    # "EXCEPTION_HANDLER": "drf_standardized_errors.handler.exception_handler",
    # TODO: Derive and make custom pagination with max_limit
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_METADATA_CLASS": "rest_framework.metadata.SimpleMetadata",
    "PAGE_SIZE": 100,
}

THUMBNAIL_DEBUG = DEBUG
THUMBNAIL_KVSTORE = "sorl.thumbnail.kvstores.redis_kvstore.KVStore"
THUMBNAIL_ENGINE = "sorl.thumbnail.engines.pil_engine.Engine"
THUMBNAIL_REDIS_URL = "redis://" + environ.get("REDIS_HOST", "127.0.0.1:6379")

AUTH_USER_MODEL = "users.User"

SPECTACULAR_SETTINGS = {
    "TITLE": "RazmenaKarata",
    "DESCRIPTION": "Platform to exchange concert/event tickets.",
    "VERSION": "0.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

DEFAULT_FROM_EMAIL = environ.get("DJANGO_EMAIL_USER")
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_HOST = environ.get("DJANGO_EMAIL_HOST")
EMAIL_PORT = int(environ.get("DJANGO_EMAIL_PORT", 587))
EMAIL_HOST_USER = environ.get("DJANGO_EMAIL_USER")
EMAIL_HOST_PASSWORD = environ.get("DJANGO_EMAIL_PASSWORD")


SIMPLE_JWT = {
   "AUTH_HEADER_TYPES": ("Bearer",),
}

DELETE_USERNAME = False

DJOSER = {
    "HIDE_USERS": True,
    "SET_PASSWORD_RETYPE": True,
    "USER_CREATE_PASSWORD_RETYPE": True,
    "PASSWORD_RESET_CONFIRM_RETYPE": True,
    "LOGOUT_ON_PASSWORD_CHANGE": True,
    "SEND_ACTIVATION_EMAIL": True,
    "ACTIVATION_URL": environ.get(
        "DJANGO_ACTIVATION_URL", "api/v1/auth/activate/{uid}/{token}/"
    ),
    "LOGIN_FIELD": "email" if DELETE_USERNAME else "username",
    # "SERIALIZERS": {"current_user": "api.serializers.CustomUserSerializer"},
}

ACTIVATION_REDIRECT = environ.get("DJANGO_ACTIVATION_REDIRECT", "")